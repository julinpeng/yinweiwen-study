## postgres安装
apt update
apt install postgresql postgresql-contrib

vi /etc/postgresql/9.5/main/pg_hba.conf
添加如下行：
host    all             all             10.8.30.0/24            md5


在磁盘上初始化一个数据库存储区域。 我们称之为一个数据库集簇（SQL 标准使用的术语是目录集簇）
$ initdb -D /usr/local/pgsql/data
-- 
$ pg_ctl -D /usr/local/pgsql/data initdb
启动数据库服务器
$ postgres -D /usr/local/pgsql/data
pg_ctl start -l logfile

关闭：
三种信号 - 1.SIGTERM 智能关闭 2.SIGINT 快速关闭 3.SIGQUIT 立即关闭
pg_ctl stop [-W] [-t seconds] [-s] [-D datadir] [-m s[mart] | f[ast] | i[mmediate] ]

pg_ctl reload
SQL函数 pg_reload_conf()

升级（主发行版本）的方式：
1. 先转储然后重新载入
2. pg_upgrade

客户端认证
/var/lib/pgsql/9.6/data/pg_hba.conf

# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            ident
host    all             all             10.8.30.117/32          trust

常见psql操作：
psql -U user -d database
切换数据库 \c database
列举数据库 \l
列举表 \dt
查看表结构 \d tbname
查看索引 \di
查看编码格式 \encoding

文件位置：
默认的文件路径：/var/lib/pgsql/9.x/data
数据集簇PGDATA
PGDATA目录下：
	配置文件：
		pg_hba.conf			pg的访问权限
		pg_ident.conf		操作系统用户名和pg中用户名的映射关系
		postgresql.conf		
	数据文件：
		base	包含每个数据库对应的子目录的子目录
			子目录的名字是数据库在pg_database中的OID
			名称为1的是模板数据库template1.(template1在initdb完成之后是可以由用户修改的，template0则始终提供一个未被修改的干净模板)
				每个表和索引都存储在单独的文件中，以该表或索引的filenode号命名(pg_class.relfilenode 注意filenode和OID不尽相同)
				文件大小超过1G后，分裂成1G大小的段，命名如filenode.1,filenode.2等
				大对象另外存储在TOAST表中
				_fsm
				_vm
		global	包含集群范围的表的子目录，比如pg_database
		pg_clog	包含事务提交状态数据的子目录
		pg_multixact	包含多重事务（multi-transaction）状态数据的子目录（用于共享的行锁）
		pg_subtrans	包含子事务状态数据的子目录
		pg_tblspc	包含指向表空间的符号链接的子目录
			默认表空间没有在此目录下关联 
			pg_default - PGDATA/base
			pg_globla -- PGDATA/global
		pg_twophase	包含用于准备好事务状态文件的子目录
		pg_xlog
	其他：
		postmaster.opts		记录 postmaster 最后一次启动时使用的命令行参数的文件
		PG_VERSION			版本号
		postmaster.pid		服务进程号pid以及共享内存段ID

		
参数设置：
修改参数设置方法：
	修改postgresql.conf文件
	ALTER SYSTEM
	系统表pg_file_settings
	对本地会话 SET configuration_parameter TO DEFAULT;  (SHOW [Configuration_parameter/ALL])
	服务器启动时 postgres -c log_connections=yes
	include 'shared.conf'
	
数据库：
	CREATE/DROP ROLE name
	CREATE DATABASE dbname OWNER rolename TEMPLATE template0
	DTOP DATABASE dbname
	表空间 CREATE TABLESPACE xxx LOCATION '/ssd1/postgres/data'
		CREATE TABLE table TABLESPACE space
		
清理：
	VACUUM、VACUUM FULL
	1. 恢复磁盘空间
		MVCC
		包含大量死亡版本时，VACUUM FULL/CLUSTER/ALTER TABLE的表重写变体，需要额外的磁盘空间
		TRUNCATE - 立即移除该表的整个内容
	2. 更新规划器统计信息
		VACUUM ANALYZE
	3. 更新可见性映射
	4. 防止事务 ID 回卷失败

	REINDEX - 提高索引空间利用率、提供访问速度(B-Tree)
	
	日志
	配置在 postgresql.conf 中‘ERROR REPORTING AND LOGGING’小节
	
		
系统表：



##2018 comming

#清理空闲连接
SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid() AND state = 'idle' AND datname='AnxinCloud';


SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname='SmartSign2' and pid <> pg_backend_pid();
-- 当前活动连接
select count(1) from pg_stat_activity;
-- 显示最大连接数
show max_connections;
-- 显示保留连接数
show superuser_reserved_connections;

PG执行Add column操作阻塞，问题未知；解决方法：重启pg服务


## 数据库备份和还原
# 23test 
	su postgres
	
	pg_dump -h 127.0.0.1 -U FashionAdmin -d SavoirCloud > /tmp/sc.bak

	(dropdb -U FashionAdmin SecureCloud)
	createdb -h 127.0.0.1 -p 5432 -U FashionAdmin SecureCloud

	psql -h 127.0.0.1 -U FashionAdmin -d SecureCloud < /tmp/sc.bak

	psql -U FashionAdmin -d SecureCloud

# 删除数据库
	dropdb -h 127.0.0.1 -U FashionAdmin SecureCloud
	或
	psql> drop database SecureCloud
	提示有连接无法删除：
	SELECT pg_terminate_backend(pid)
	FROM pg_stat_activity
	WHERE datname = 'mydb';

执行数据库脚本
psql -U postgres -f secure_cloud.sql 

pg_dump --dbname="Anxinyun0726" --file="anxinyun0726.sql" --create -U FashionAdmin

复制数据到csv：
psql

\copy (Select * From foo) To '/tmp/test.csv' With CSV


# 让自增 Seq (Serial) 跟上ID
	PERFORM setval('"public"."T_DIM_FORMULA_PARA_FormulaParaID_seq"',(SELECT MAX(formula_para_id) FROM t_formula_para), true);
	
# pg_dump 导出
pg_dump --dbname="haiwen1106" --file=/home/anxin/dump1.sql -h 10.8.30.32 --no-owner --column-inserts



# 时间处理：
select s."SENSOR_LOCATION_DESCRIPTION",b."TEMPERATURE_VALUE",b."ACQUISITION_DATETIME" from "T_DIM_SENSOR" s,"T_THEMES_ENVI_TEMP_HUMI" b where s."SENSOR_ID"=b."SENSOR_ID" and b."ID" in (
  select min("ID") from "T_THEMES_ENVI_TEMP_HUMI"  where "ACQUISITION_DATETIME">'2019-12-01' and "ACQUISITION_DATETIME"<'2019-12-11'
  GROUP BY "SENSOR_ID",date_trunc('hour',"ACQUISITION_DATETIME"),floor(date_part('minute',"ACQUISITION_DATETIME")/30)
) ORDER BY "ACQUISITION_DATETIME";
以上sql：没30分钟取一条数据

select now(); 
select current_date;

select date_part('day',now());

select date_part('day',now()::timestamp-'2018-01-10 10:12:15::timestamp');

select extract(day from now()-create_time) from t_test;

select now()-interval '2 day';

select date_trunc('month',now()); -- 本月第一天


## upsert 
insert into t_data_latest(sensor_id,safety_factor_type_id,acquisition_datetime,data)
values(1,1,'2019-12-15','{1,2,3}') ON CONFLICT(sensor_id)
    DO UPDATE set acquisition_datetime='2019-12-15 01:00:00',data='{2,null,1}';


## windows 数据文件迁移
9.6：
[https://www.landui.com/help/show-3587.html](Windows如何设置或更改PostgreSQL数据目录位置)  [https://radumas.info/blog/tutorial/2016/08/08/Migrating-PostgreSQL-Data-Directory-Windows.html](%%)
	修改注册表：
	对应键值位置在"HKEY_LOCAL_MACHINESYSTEMCurrentControlSetServicespostgresql-x64-9.5ImagePath"，将“－D”后的目录名修改为新的数据目录位置即可，如果目录路径中含有空格，需要用引号引起。
	移动文件。
	启动时报超时错误：
	pg_resetxlog.exe -f [pgData folder location]



## 高频率更新的表文件比较大
	
	现象：t_data_latest最新数据表，数据经常update，2周后数据表大小接近1G
	https://dba.stackexchange.com/questions/69464/postgres-table-growing-on-massive-updates
	
	解决：
	
## postgresql 数据库大小查看

1. SELECT oid from pg_database where datname='postgres';
到数据库数据所在目录下查找对应文件夹的大小即可

2.select pg_size_pretty(pg_database_size('NBJJ_1114'));


## 数据库数据部分备份方法：
 
 备份所有表结构DLL
 pg_dump -h 10.8.30.32 -U postgres --dbname="haiwen20200401" --no-owner --schema='public' --oids --schema-only --file="/tmp/schema.sql"
 
 指定表数据备份
  pg_dump -h 10.8.30.32 -U postgres --dbname="haiwen20200401" --no-owner --schema='public' --data-only --table=public.\"T_ALARM_PUSHPOLICY\" --table=public.\"T_ALARM_PUSHPOLICY_DETAIL\" --table=public.\"T_ALARM_RECEIVER\" --table=public.\"T_ALARM_RECEIVER_STRUCTURE\" --table=public.\"T_BIM\" --table=public.\"T_BIM_STATIONS\" --table=public.\"T_BRIDGE_COMPONENT\" --table=public.\"T_BRIDGE_EVALUATE\" --table=public.\"T_BRIDGE_EVALUATE_SCORE\" --table=public.\"T_BRIDGE_MEMBER\" --table=public.\"T_BRIDGE_PART\" --table=public.\"T_CONSTRUCTION_LOG_DETAIL\" --table=public.\"T_DATA_AGGREGATION\" --table=public.\"T_DATA_FILE_TYPE\"   --table=public.\"T_DATA_OVERLOAD_STATISTIC\" --table=public.\"T_DATA_RATIONAL_FILTER_CONFIG\" --table=public.\"T_DIM_AGG_CONFIG\" --table=public.\"T_DIM_AGG_TYPE\" --table=public.\"T_DIM_AGG_WAY\" --table=public.\"T_DIM_CALCULATION_METHOD\" --table=public.\"T_DIM_CONSTRUCTION_LOG_ITEM\" --table=public.\"T_DIM_CONSTRUCTION_LOG_TEMPLATE\" --table=public.\"T_DIM_CONSTRUCTION_TEMPLATE_ITEM\" --table=public.\"T_DIM_DATETIME\" --table=public.\"T_DIM_DEVICE_STATUS_LATEST\" --table=public.\"T_DIM_DIRECTION\" --table=public.\"T_DIM_DTU\" --table=public.\"T_DIM_DTU_ACCESS\" --table=public.\"T_DIM_DTU_PRODUCT\" --table=public.\"T_DIM_ETHERNET\" --table=public.\"T_DIM_FACTOR_AGG_CONFIG\" --table=public.\"T_DIM_FACTOR_PRODUCT_TYPE\" --table=public.\"T_DIM_FACTOR_UNIT_INT\" --table=public.\"T_DIM_FATIGUE_DAMAGE_CONFIG\" --table=public.\"T_DIM_FATIGUE_DAMAGE_INFO\" --table=public.\"T_DIM_FORMULAID\" --table=public.\"T_DIM_FORMULAID_SET\" --table=public.\"T_DIM_FORMULA_PARA\" --table=public.\"T_DIM_FORMULA_PARA_NAME\" --table=public.\"T_DIM_GROUP\" --table=public.\"T_DIM_GROUP_TYPE\" --table=public.\"T_DIM_GROUP_TYPE_SAFE_FACTOR\"  --table=public.\"T_DIM_IDAU_DIAGNOSIS_ATTRIBUTES\" --table=public.\"T_DIM_LOCAL_FILE\" --table=public.\"T_DIM_NETWORK\" --table=public.\"T_DIM_NVR_FACTORY\" --table=public.\"T_DIM_PHONE_VALIDATE_CODE\" --table=public.\"T_DIM_PRODUCTCATAGORY_ORIGINALDATA\" --table=public.\"T_DIM_PRODUCT_CATEGORY\" --table=public.\"T_DIM_PRODUCT_TYPE\" --table=public.\"T_DIM_PROTOCOL_TYPE\" --table=public.\"T_DIM_REGION\" --table=public.\"T_DIM_REGION_TYPE\" --table=public.\"T_DIM_REMOTE_DTU\" --table=public.\"T_DIM_RESOURCE\" --table=public.\"T_DIM_ROLE\" --table=public.\"T_DIM_ROLE_RESOURCE\" --table=public.\"T_DIM_SAFETY_FACTOR_TYPE\" --table=public.\"T_DIM_SENSOR\" --table=public.\"T_DIM_SENSORPRODUCT_SAFETYFACTORTYPE\" --table=public.\"T_DIM_SENSOR_CORRENT\" --table=public.\"T_DIM_SENSOR_EXT\" --table=public.\"T_DIM_SENSOR_FATIGUE_DAMAGE\" --table=public.\"T_DIM_SENSOR_GPS\" --table=public.\"T_DIM_SENSOR_GROUP\" --table=public.\"T_DIM_SENSOR_GROUP_CEXIE\" --table=public.\"T_DIM_SENSOR_GROUP_CHENJIANG\" --table=public.\"T_DIM_SENSOR_GROUP_JINRUNXIAN\" --table=public.\"T_DIM_SENSOR_PRODUCT\" --table=public.\"T_DIM_SENSOR_TIME_BATCH\" --table=public.\"T_DIM_SERIAL_PORT\" --table=public.\"T_DIM_STRUCTUER_LINE\" --table=public.\"T_DIM_STRUCTUER_PROGRESS\" --table=public.\"T_DIM_STRUCTURE\" --table=public.\"T_DIM_STRUCTURE_CONSTRUCTION_LOG_CONFIG\" --table=public.\"T_DIM_STRUCTURE_FACTOR\" --table=public.\"T_DIM_STRUCTURE_TYPE\" --table=public.\"T_DIM_STRUCTURE_TYPE_FACTOR\" --table=public.\"T_DIM_STRUCT_DTU\" --table=public.\"T_DIM_STRUCT_FACTOR_UNIT\" --table=public.\"T_DIM_USER\" --table=public.\"T_DIM_USER_STRUCTURE\" --table=public.\"T_DIM_VEHICLE_CATEGORY\" --table=public.\"T_DIM_VEHICLE_OVERLOAD\" --table=public.\"T_DIM_VIBRATION_CHANNEL\" --table=public.\"T_DIM_VIBRATION_MODULE\" --table=public.\"T_DIM_VIDEOPOINT_SENSOR\" --table=public.\"T_DIM_VIDEO_FACTOR\" --table=public.\"T_DIM_VIDEO_MONITORING_POINTS\" --table=public.\"T_DIM_VIDEO_NVR\" --table=public.\"T_DIM_VIDEO_PUSH_SERVER_ADDRESS\" --table=public.\"T_DIM_VIDEO_STRUCTURE\" --table=public.\"T_DIM_WARNING_DEVICETYPE\" --table=public.\"T_DIM_WARNING_TYPE\" --table=public.\"T_EXTRACT_SENSOR_MAP\" --table=public.\"T_EXTRACT_TABLE_MAP\" --table=public.\"T_EXTRACT_TIME\" --table=public.\"T_FACT_CHANGE_RATE_THRESHOLD\" --table=public.\"T_FACT_SENSOR_THRESHOLD\" --table=public.\"T_REPORT_CONFIG\" --table=public.\"T_REPORT_CONFIG_TEMPLATE\" --table=public.\"T_REPORT_TEMPLATE\" --table=public.UserToken  --file="/tmp/data.sql"
  
  /**
  拆寻数据记录
  select relname,reltuples as rowCounts
from pg_class
where relkind = 'r' and relnamespace = (select oid from pg_namespace where nspname='public')
and relname like 't_%' order by rowCounts desc;
  
  **/
  ## with pattern
  pg_dump -h 10.8.30.32 -U postgres --dbname="NBJJ_1114" --no-owner --schema='public' --oids --schema-only --file="/tmp/schema.sql"
  pg_dump -h 10.8.30.32 -U postgres --dbname="NBJJ_1114" --no-owner --schema='public' --data-only -T 't*log' -T 't_data_traffic_load_original' -T 't_themes_traffic_load_simplify' -T 't_sensor_status_statistics' -T 't_data_original' -T 't_data_latest' -T 't_themes*' -T 't_warning' -T 't_warning_archive' -T 't_warning_detail' -T 't_warning_deal_detail' -T 't_user_token' --file="/tmp/data.sql"
  
  还原：
  psql -U postgres -d haiwen -f ./Desktop/schema.sql
  psql -U postgres -d haiwen -f ./Desktop/data.sql
=======
-- 查询索引大小
select indexrelname, 
       pg_size_pretty(pg_relation_size(indexrelid)) 
from pg_stat_user_indexes 
where schemaname = 'public' 
order by pg_relation_size(indexrelid) desc; 

-- 查询表大小
select relname, 
       pg_size_pretty(pg_relation_size(relid)) 
from pg_stat_user_tables 
where schemaname = 'public' 
order by pg_relation_size(relid) desc; 


copy (select st.name,f.name,f.id,f.proto,fpix from t_structure_type st,t_structure_type_factor sf,t_factor f
LEFT JOIN
  (SELECT proto,jsonb_agg((SELECT x FROM (SELECT faci.id,faci.name,faci.field_name,unit.name as unit_name) x)) AS fpix FROM t_factor_proto_item faci,t_item_unit unit
  WHERE unit.item=faci.id AND unit.if_default GROUP BY proto) AS fpi ON fpi.proto=f.proto
where sf.factor=f.id and st.id=sf.structure_type order by st.id,f.proto) to '/tmp/allfactors.txt';


-- 查询某个表的所有外键约束

SELECT x.table_name, x.column_name,x.constraint_name

         FROM  information_schema.key_column_usage x

      INNER JOIN  (SELECT  t.relname,

                   a.conname

             FROM  pg_constraint a

             INNER JOIN pg_class ft

                     ON ft.oid = a.confrelid

             INNER JOIN pg_class t

                     ON t.oid = a.conrelid

            WHERE  a.contype = 'f'

              AND  a.confrelid =

                   (select e.oid

                      from pg_class e

                     where e.relname = 't_sensor')

            ) tp

      ON (x.table_name = tp.relname AND

          x.constraint_name = tp.conname);
		  
## 查询物联网卡：
// pg
select t.id,t.name,t."createdAt",u.username,d.properties::json->'SIMNum' from "Thing" t,"Device" d,"User" u
where d."thingId"=t.id and
      t."belongTo"=u.id and
      d."deviceMetaId" in (select id from "DeviceMeta" where name='DTU')
and char_length((d.properties::json->'SIMNum')::varchar)>13;

sqlserver
select st.STRUCTURE_NAME_CN,REMOTE_DTU_SUBSCRIBER,u.PlatformId from T_DIM_STRUCTURE st,T_DIM_STRUCT_DTU sd,T_DIM_REMOTE_DTU d,T_DIM_USER u
where st.IsDelete=0 and st.ID=sd.StructureId
  and sd.DtuId=d.ID and st.owner=u.USER_NO
and REMOTE_DTU_SUBSCRIBER is not null and len(replace(REMOTE_DTU_SUBSCRIBER,' ',''))>11;


## 数据库自动备份

https://www.cnblogs.com/telwanggs/p/11547370.html

https://www.jianshu.com/p/b2c254897071